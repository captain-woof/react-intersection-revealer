{"version":3,"sources":["../../src/index.js","styles/indexContainerStyle.js","styles/indexTextStyle.js","styles/indexBoxStyle.js","styles/globalStyle.js","styles/indexHeaderStyle.js","styles/mousePointerStyle.js","components/mousePointer.js","App.js","index.js"],"names":["isElementInView","targetElement","boundBox","window","getEleVisibleX","Math","getEleVisibleY","getHeightWidthAndVisible","heightVisible","widthVisible","width","getNewWidthHeight","height","getXY","x","y","top","useIntersectionRevealer","ref","useState","inView","setInView","visibleFractionX","setVisibleFractionX","visibleFractionY","setVisibleFractionY","setHeight","setwidth","setHeightVisible","setwidthVisible","setX","setY","useEffect","onChange","useCallback","handleChange","IndexContainerStyle","styled","div","IndexTextStyle","h1","IndexBoxStyle","GlobalStyle","createGlobalStyle","PackageNameText","ButtonContainer","Button","a","IndexHeaderStyle","MouseStyle","vanish","css","MousePointer","innerWidth","innerHeight","handleMouseMove","e","pageX","pageY","document","addEventListener","removeEventListener","style","left","App","boxRef","useRef","showStats","setShowStats","allowShowingStats","setVanish","onMouseEnter","onMouseLeave","href","target","round","ReactDOM","render","getElementById"],"mappings":"2QAGMA,EAAkB,SAACC,GACrB,MACI,SAEJ,IAAIC,EAAWD,EAAf,wBACA,OAASC,MAAeC,OAAhB,aAAwCD,OAAgBC,OAAxD,YAA+ED,UAAvF,GAGEE,EAAiB,SAACH,GACpB,MACI,YAEJ,IAAIC,EAAWD,EAAf,wBACA,OAAKD,EAAL,GAEYE,SAAkBC,OAAnB,YAA0CD,SAA1C,GAAmEA,QAAiBC,OAApF,YAA2GD,QAA/G,EACH,EAEOG,UACDF,kBAAoBD,EAArB,MAAsCA,EADpCG,MAEFH,QAAiBA,EAFtB,OAJA,GAWFI,EAAiB,SAACL,GACpB,MACI,YAEJ,IAAIC,EAAWD,EAAf,wBACA,OAAKD,EAAL,GAEYE,UAAmBC,OAApB,aAA4CD,UAA5C,GAAsEA,OAAgBC,OAAtF,aAA8GD,OAAlH,EACH,EAEOG,UACDF,mBAAqBD,EAAtB,KAAsCA,EADpCG,OAEFH,SAAkBA,EAFvB,QAJA,GAWFK,EAA2B,SAACN,GAC9B,MACI,MAAQ,CACJO,cADI,KAEJC,aAAc,MAItB,IAAIP,EAAWD,EAAf,wBACA,MAAQ,CACJO,cAAeF,KAAgCJ,EAD3C,OAEJO,aAAcL,KAAgCF,EAASQ,QAIzDC,EAAoB,SAACV,GACvB,MACI,MAAQ,CACJW,OADI,KAEJF,MAAO,MAIf,IAAIR,EAAWD,EAAf,wBACA,MAAQ,CACJW,OAAQV,EADJ,OAEJQ,MAAOR,EAASQ,QAIlBG,EAAQ,SAACZ,GACX,MACI,MAAO,CACHa,EADG,KAEHC,EAAG,MAIX,IAAIb,EAAWD,EAAf,wBACA,MAAO,CACHa,EAAGX,eAAiBD,EADjB,KAEHa,EAAGZ,eAAiBD,EAASc,MAwBxBC,EAA0B,SAACC,GAGpC,MAA4BC,mBAASnB,EAAgBkB,EAArD,UAAOE,EAAP,KAAeC,EAAf,KAEA,EAAgDF,mBAASf,EAAec,EAAxE,UAAOI,EAAP,KAAyBC,EAAzB,KAEA,EAAgDJ,mBAASb,EAAeY,EAAxE,UAAOM,EAAP,KAAyBC,EAAzB,KAEA,EAA4BN,mBAASR,EAAkBO,EAAlBP,SAArC,QAAOC,EAAP,KAAec,EAAf,KACA,EAA0BP,mBAASR,EAAkBO,EAAlBP,SAAnC,OAAOD,EAAP,KAAciB,EAAd,KACA,EAA0CR,mBAASZ,EAAyBW,EAAzBX,SAAnD,eAAOC,EAAP,KAAsBoB,EAAtB,KACA,EAAwCT,mBAASZ,EAAyBW,EAAzBX,SAAjD,cAAOE,EAAP,KAAqBoB,EAArB,KAEA,EAAkBV,mBAASN,EAAMK,EAANL,SAA3B,GAAOC,EAAP,KAAUgB,EAAV,KACA,EAAkBX,mBAASN,EAAMK,EAANL,SAA3B,GAAOE,EAAP,KAAUgB,EAAV,KAGAC,qBAAU,WACNX,EAAUrB,EAAgBkB,EAA1BG,UACAE,EAAoBnB,EAAec,EAAnCK,UACAE,EAAoBnB,EAAeY,EAAnCO,UAEA,MAAsClB,EAAyBW,EAA/D,SAAMV,EAAN,gBAAqBC,EAArB,eACA,EAAwBE,EAAkBO,EAA1C,SAAMN,EAAN,SAAcF,EAAd,QACA,EAAeG,EAAMK,EAArB,SAAMJ,EAAN,IAASC,EAAT,IACAW,KACAC,KACAC,KACAC,KACAC,KACAC,OACD,CAACb,EAdJc,UAiBA,IAAMC,EAAWC,uBAAY,YAtDZ,SAAChB,EAAKQ,EAAWC,EAAUN,EAAWE,EAAqBE,EAAqBG,EAAkBC,EAAiBC,EAAMC,GAC1IV,EAAUrB,EAAgBkB,EAA1BG,UACAE,EAAoBnB,EAAec,EAAnCK,UACAE,EAAoBnB,EAAeY,EAAnCO,UAEA,MAAsClB,EAAyBW,EAA/D,SAAMV,EAAN,gBAAqBC,EAArB,eACAmB,KACAC,KAEA,MAAehB,EAAMK,EAArB,SAAMJ,EAAN,IAASC,EAAT,IACAe,KACAC,KAEA,MAAwBpB,EAAkBO,EAA1C,SAAMN,EAAN,SAAcF,EAAd,QACAgB,KACAC,KAwCIQ,CAAajB,EAAKQ,EAAWC,EAAUN,EAAWE,EAAqBE,EAAqBG,EAAkBC,EAAiBC,EAA/HK,KACD,CAFH,IAuBA,OAlBAH,qBAAU,WAEN,OADA7B,oCACO,WAAQA,0CAFnB6B,IAMAA,qBAAU,WAAM,MAEZ,OADA,UAAAd,EAAA,4DACO,WAAM,MAAE,UAAAA,EAAA,kEAFnBc,IAMAA,qBAAU,WAEN,OADA7B,oCACO,WAAQA,0CAFnB6B,IAMO,CACHZ,OADG,EAEHE,iBAFG,EAGHE,iBAHG,EAIHZ,OAJG,EAKHF,MALG,EAMHF,cANG,EAOHC,aAPG,EAQHK,EARG,EASHC,M,cC/KKqB,EAAsBC,IAAOC,IAAV,iLCAnBC,EAAiBF,IAAOG,GAAV,mQCAdC,EAAgBJ,IAAOC,IAAV,uICAbI,EAAcC,YAAH,uVCAXC,EAAkBP,IAAOC,IAAV,8MAUfO,EAAkBR,IAAOC,IAAV,yNAWfQ,EAAST,IAAOU,EAAV,+WAiBNC,EAAmBX,IAAOC,IAAV,iPCtChBW,EAAaZ,IAAOC,IAAV,sXAWjB,qBAAGY,QAAwBC,YAAJ,wDCTd,SAASC,EAAT,GAAmC,IAAXF,EAAU,EAAVA,OAEnC,EAAkB/B,mBAAShB,OAAOkD,WAAa,GAA/C,mBAAOvC,EAAP,KAAUgB,EAAV,KACA,EAAkBX,mBAAShB,OAAOmD,YAAc,GAAhD,mBAAOvC,EAAP,KAAUgB,EAAV,KAEMwB,EAAkBrB,uBAAY,SAACsB,GACjC1B,EAAK0B,EAAEC,OACP1B,EAAKyB,EAAEE,SACR,IAOH,OALA1B,qBAAU,WAEN,OADA2B,SAASC,iBAAiB,YAAaL,GAChC,WAAQI,SAASE,oBAAoB,YAAaN,MAC1D,CAACA,IAGA,kBAACN,EAAD,CAAYC,OAAQA,EAAQY,MAAO,CAAE9C,IAAKD,EAAGgD,KAAMjD,KCP5C,SAASkD,IAEtB,IAAMC,EAASC,mBAGf,EAAwCjD,EAAwBgD,GAAxD7C,EAAR,EAAQA,OAAQZ,EAAhB,EAAgBA,cAAeM,EAA/B,EAA+BA,EAAGC,EAAlC,EAAkCA,EAGlC,EAAkCI,oBAAS,GAA3C,mBAAOgD,EAAP,KAAkBC,EAAlB,KACMC,EAAoBnC,uBAAY,WACpCkC,GAAa,GACbjE,OAAO0D,oBAAoB,SAAUQ,KACpC,IACHrC,qBAAU,WACR7B,OAAOyD,iBAAiB,SAAUS,KACjC,CAACA,IACJrC,qBAAU,WACR7B,OAAOyD,iBAAiB,SAAUS,KACjC,CAACA,IAGJ,MAA4BlD,oBAAS,GAArC,mBAAO+B,EAAP,KAAeoB,EAAf,KAEA,OACE,oCACE,kBAAC5B,EAAD,MACA,kBAACU,EAAD,CAAcF,OAAQA,IACtB,kBAACF,EAAD,KACE,kBAACJ,EAAD,oCACA,kBAACC,EAAD,KACE,kBAACC,EAAD,CAAQyB,aAAc,WAAQD,GAAU,IAASE,aAAc,WAAQF,GAAU,IAAUG,KAAK,8DAA8DC,OAAO,UAArK,UAGA,kBAAC5B,EAAD,CAAQyB,aAAc,WAAQD,GAAU,IAASE,aAAc,WAAQF,GAAU,IAAUG,KAAK,oFAAoFC,OAAO,UAA3L,YAMJ,kBAACnC,EAAD,KACG4B,EACG,oCACA,oDAAsB9D,KAAKsE,MAAM7D,GAAjC,eAA0CT,KAAKsE,MAAM5D,GAArD,QACA,gDAAkBK,IAClB,uDAAyBf,KAAKsE,MAAMnE,GAApC,QAEA,qGAIN,kBAAC4B,EAAD,KACE,kBAACK,EAAD,CAAevB,IAAK+C,KAGtB,kBAAC7B,EAAD,OC/DNwC,IAASC,OAAO,kBAACb,EAAD,MAASL,SAASmB,eAAe,W","file":"static/js/main.0cef7100.chunk.js","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\n\n//// Functions to get visibility stats\nconst isElementInView = (targetElement) => {\n    if (!targetElement) { // If element is null\n        return false\n    }\n    let boundBox = targetElement.getBoundingClientRect()\n    return ((boundBox.top < window.innerHeight) && (boundBox.left < window.innerWidth) && (boundBox.bottom >= 0))\n}\n\nconst getEleVisibleX = (targetElement) => {\n    if (!targetElement) { // If element is null\n        return null\n    }\n    let boundBox = targetElement.getBoundingClientRect()\n    if (!isElementInView(targetElement)) {\n        return 0\n    } else if ((boundBox.right <= window.innerWidth) && (boundBox.right >= 0) && (boundBox.left <= window.innerWidth) && (boundBox.left >= 0)) {\n        return 1\n    } else {\n        return Math.min(\n            ((window.innerWidth - boundBox.left) / boundBox.width),\n            (boundBox.right / boundBox.width)\n        )\n    }\n}\n\nconst getEleVisibleY = (targetElement) => {\n    if (!targetElement) { // If element is null\n        return null\n    }\n    let boundBox = targetElement.getBoundingClientRect()\n    if (!isElementInView(targetElement)) {\n        return 0\n    } else if ((boundBox.bottom <= window.innerHeight) && (boundBox.bottom >= 0) && (boundBox.top <= window.innerHeight) && (boundBox.top >= 0)) {\n        return 1\n    } else {\n        return Math.min(\n            ((window.innerHeight - boundBox.top) / boundBox.height),\n            (boundBox.bottom / boundBox.height)\n        )\n    }\n}\n\nconst getHeightWidthAndVisible = (targetElement) => {\n    if (!targetElement) {\n        return ({\n            heightVisible: null,\n            widthVisible: null,\n        })\n    }\n\n    let boundBox = targetElement.getBoundingClientRect()\n    return ({\n        heightVisible: getEleVisibleY(targetElement) * boundBox.height,\n        widthVisible: getEleVisibleX(targetElement) * boundBox.width,\n    })\n}\n\nconst getNewWidthHeight = (targetElement) => {\n    if (!targetElement) {\n        return ({\n            height: null,\n            width: null\n        })\n    }\n\n    let boundBox = targetElement.getBoundingClientRect()\n    return ({\n        height: boundBox.height,\n        width: boundBox.width\n    })\n}\n\nconst getXY = (targetElement) => {\n    if (!targetElement) {\n        return {\n            x: null,\n            y: null\n        }\n    }\n\n    let boundBox = targetElement.getBoundingClientRect()\n    return {\n        x: window.scrollX + boundBox.left,\n        y: window.scrollY + boundBox.top\n    }\n}\n\n// Handles changes in target element such as transitions, or when page scrolls\nconst handleChange = (ref, setHeight, setwidth, setInView, setVisibleFractionX, setVisibleFractionY, setHeightVisible, setwidthVisible, setX, setY) => {\n    setInView(isElementInView(ref.current))\n    setVisibleFractionX(getEleVisibleX(ref.current))\n    setVisibleFractionY(getEleVisibleY(ref.current))\n\n    let { heightVisible, widthVisible } = getHeightWidthAndVisible(ref.current)\n    setHeightVisible(heightVisible)\n    setwidthVisible(widthVisible)\n\n    let { x, y } = getXY(ref.current)\n    setX(x)\n    setY(y)\n\n    let { height, width } = getNewWidthHeight(ref.current)\n    setHeight(height)\n    setwidth(width)\n}\n\n// Below function takes the ref to the element/component that needs to be tracked\nexport const useIntersectionRevealer = (ref) => {\n    //// States for tracking data\n    // stores element visibility (boolean)\n    const [inView, setInView] = useState(isElementInView(ref.current))\n    // Stores y-axis visibility (fraction)\n    const [visibleFractionX, setVisibleFractionX] = useState(getEleVisibleX(ref.current))\n    // Stores y-axis visibility (fraction)\n    const [visibleFractionY, setVisibleFractionY] = useState(getEleVisibleY(ref.current))\n    // Stores height and width, and their absolute visibility\n    const [height, setHeight] = useState(getNewWidthHeight(ref.current).height)\n    const [width, setwidth] = useState(getNewWidthHeight(ref.current).width)\n    const [heightVisible, setHeightVisible] = useState(getHeightWidthAndVisible(ref.current).heightVisible)\n    const [widthVisible, setwidthVisible] = useState(getHeightWidthAndVisible(ref.current).widthVisible)\n    // Stores targetElement's x,y\n    const [x, setX] = useState(getXY(ref.current).x)\n    const [y, setY] = useState(getXY(ref.current).y)\n\n    // Sets initial stats when Target element renders (is not null)\n    useEffect(() => {\n        setInView(isElementInView(ref.current))\n        setVisibleFractionX(getEleVisibleX(ref.current))\n        setVisibleFractionY(getEleVisibleY(ref.current))\n\n        let { heightVisible, widthVisible } = getHeightWidthAndVisible(ref.current)\n        let { height, width } = getNewWidthHeight(ref.current)\n        let { x, y } = getXY(ref.current)\n        setHeight(height)\n        setwidth(width)\n        setHeightVisible(heightVisible)\n        setwidthVisible(widthVisible)\n        setX(x)\n        setY(y)\n    }, [ref.current])\n\n    //// Function that invokes change handler\n    const onChange = useCallback(() => {\n        handleChange(ref, setHeight, setwidth, setInView, setVisibleFractionX, setVisibleFractionY, setHeightVisible, setwidthVisible, setX, setY)\n    }, [ref])\n\n    //// Hook on to window scroll event\n    useEffect(() => {\n        window.addEventListener('scroll', onChange)\n        return () => { window.removeEventListener('scroll', onChange) }\n    }, [])\n\n    //// Hook on to targetElement's transition\n    useEffect(() => {\n        ref.current?.addEventListener('transitionend', onChange)\n        return () => { ref.current?.removeEventListener('transitionend', onChange) }\n    }, [])\n\n    //// Hook on to window resize\n    useEffect(() => {\n        window.addEventListener('resize', onChange)\n        return () => { window.removeEventListener('resize', onChange) }\n    }, [])\n\n    //// Return stats\n    return {\n        inView,\n        visibleFractionX,\n        visibleFractionY,\n        height,\n        width,\n        heightVisible,\n        widthVisible,\n        x,\n        y\n    }\n}","import styled from 'styled-components'\n\nexport const IndexContainerStyle = styled.div`\n    background-color: yellow;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-height: 140vh;\n    width: 100%;\n`","import styled from 'styled-components'\n\nexport const IndexTextStyle = styled.h1`\n    font-size: 2.5rem;\n    color: black;\n    font-weight: 400;\n    background-color: transparent;\n    position: fixed;\n    top: calc(50vh);\n    left: 32px;\n    width: 300px;\n    display: flex;\n    flex-direction: column;\n`","import styled from 'styled-components'\n\nexport const IndexBoxStyle = styled.div`\n    height: 280px;\n    width: 280px;\n    background-color: black;\n    transform: translate(0px, 60vh);\n`","import { createGlobalStyle } from 'styled-components'\n\nexport const GlobalStyle = createGlobalStyle`\n    body {\n        margin: 0;\n        padding: 0;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n        text-rendering: optimizeLegibility;\n        font-size: 16px;\n        font-family: 'Lato', sans-serif;\n        user-select: none;\n        cursor: none;\n    }\n`","import styled from 'styled-components'\n\nexport const PackageNameText = styled.div`\n    color: black;\n    font-size: 1.2rem;\n    font-weight: 400;\n    font-style: italic;\n    align-self: center;\n    border-bottom: 2px solid black;\n    margin-right: 2rem;\n`\n\nexport const ButtonContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    color: black;\n    font-size: 1rem;    \n    flex-grow: 1;\n    text-align: end;\n    justify-content: flex-end;\n    margin-right: 3rem;\n`\n\nexport const Button = styled.a`    \n    border-radius: 4px;\n    padding: 4px 8px;\n    border: 2px solid transparent;\n    height: fit-content;\n    width: fit-content;\n    margin-right: 0.5rem;\n    transition: all 0.3s linear;\n    text-decoration: none;\n    color: black;\n    cursor: none;\n    opacity: 1;\n    &:hover {\n        border: 2px solid black;\n    }\n`\n\nexport const IndexHeaderStyle = styled.div`\n    background-color: transparent;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: max-content;\n    display: flex;\n    flex-direction: row;\n    z-index: 99;\n    margin: 12px;\n`","import styled, { css } from 'styled-components'\n\nexport const MouseStyle = styled.div`\n    background-color: transparent;\n    height: 32px;\n    width: 32px;\n    border-radius: 50%;\n    border: 2px solid black;\n    transform: translate(-50%, -50%);\n    position: absolute;\n    pointer-events: none;\n    opacity: 1;\n    transition: opacity 0.3s linear;\n    ${({ vanish }) => (vanish && css`\n        opacity: 0;\n    `)}\n    @media (max-width: 600px){\n        display: none;\n    }\n`","import { MouseStyle } from \"../styles/mousePointerStyle\"\nimport React, { useCallback } from \"react\"\nimport { useEffect, useState } from \"react\"\n\nexport default function MousePointer({ vanish }) {\n\n    const [x, setX] = useState(window.innerWidth / 2)\n    const [y, setY] = useState(window.innerHeight / 2)\n\n    const handleMouseMove = useCallback((e) => {\n        setX(e.pageX)\n        setY(e.pageY)\n    }, [])\n\n    useEffect(() => {\n        document.addEventListener('mousemove', handleMouseMove)\n        return () => { document.removeEventListener('mousemove', handleMouseMove) }\n    }, [handleMouseMove])\n\n    return (\n        <MouseStyle vanish={vanish} style={{ top: y, left: x }} />\n    )\n}","// Package imports\nimport React, { useCallback, useRef } from 'react'\nimport { useIntersectionRevealer } from 'react-intersection-revealer'\n\n// Styles\nimport { IndexContainerStyle } from './styles/indexContainerStyle'\nimport { IndexTextStyle } from './styles/indexTextStyle'\nimport { IndexBoxStyle } from './styles/indexBoxStyle'\nimport { GlobalStyle } from './styles/globalStyle'\nimport { Button, IndexHeaderStyle, PackageNameText, ButtonContainer } from './styles/indexHeaderStyle'\nimport { useEffect, useState } from 'react'\nimport MousePointer from './components/mousePointer'\n\nexport default function App() {\n  // Reference for the black box\n  const boxRef = useRef()\n\n  // Passing ref to hook and getting states\n  const { inView, heightVisible, x, y } = useIntersectionRevealer(boxRef)\n\n  // For demo\n  const [showStats, setShowStats] = useState(false)\n  const allowShowingStats = useCallback(() => {\n    setShowStats(true)\n    window.removeEventListener('scroll', allowShowingStats)\n  }, [])\n  useEffect(() => {\n    window.addEventListener('scroll', allowShowingStats)\n  }, [allowShowingStats])\n  useEffect(() => {\n    window.addEventListener('resize', allowShowingStats)\n  }, [allowShowingStats])\n\n  // For mouse pointer\n  const [vanish, setVanish] = useState(false)\n\n  return (\n    <>\n      <GlobalStyle />\n      <MousePointer vanish={vanish} />\n      <IndexHeaderStyle>\n        <PackageNameText>react-intersection-revealer</PackageNameText>\n        <ButtonContainer>\n          <Button onMouseEnter={() => { setVanish(true) }} onMouseLeave={() => { setVanish(false) }} href=\"https://github.com/captain-woof/react-intersection-revealer\" target=\"_blank\">\n            Github\n          </Button>\n          <Button onMouseEnter={() => { setVanish(true) }} onMouseLeave={() => { setVanish(false) }} href=\"https://github.com/captain-woof/react-intersection-revealer/blob/master/README.md\" target=\"_blank\">\n            README\n          </Button>\n        </ButtonContainer>\n      </IndexHeaderStyle>\n\n      <IndexTextStyle>\n        {showStats\n          ? <>\n            <div>{`Rendered at (${Math.round(x)}px, ${Math.round(y)}px)`}</div>\n            <div>{`Visible: ${inView}`}</div>\n            <div>{`Visible height: ${Math.round(heightVisible)}px`}</div>\n          </>\n          : <div>Scroll or resize the window to see the black box's visibility stats</div>\n        }\n      </IndexTextStyle>\n\n      <IndexContainerStyle>\n        <IndexBoxStyle ref={boxRef} />\n      </IndexContainerStyle>\n\n      <IndexContainerStyle>\n\n      </IndexContainerStyle>\n    </>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}